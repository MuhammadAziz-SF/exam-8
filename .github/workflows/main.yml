name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-and-unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm test

  e2e-test:
    runs-on: ubuntu-latest
    needs: lint-and-unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env.test file
        run: |
          echo "PORT=3000" > .env.test
          echo "PG_HOST=db" >> .env.test
          echo "PG_PORT=5432" >> .env.test
          echo "PG_USER=testuser" >> .env.test
          echo "PG_PASS=testpass" >> .env.test
          echo "PG_DB=testdb" >> .env.test
          echo "PG_DB_TEST=testdb" >> .env.test
          echo "ACCESS_TOKEN_KEY=some-secret-key-for-testing" >> .env.test
          echo "ACCESS_TOKEN_TIME=15m" >> .env.test
          echo "REFRESH_TOKEN_KEY=another-secret-key-for-testing" >> .env.test
          echo "REFRESH_TOKEN_TIME=7d" >> .env.test
          echo "DB_URL=dummy" >> .env.test
          echo "SMTP_HOST=dummy" >> .env.test
          echo "SMTP_PORT=dummy" >> .env.test
          echo "SMTP_USER=dummy" >> .env.test
          echo "SMTP_PASS=dummy" >> .env.test
          echo "ADMIN_NAME=dummy" >> .env.test
          echo "ADMIN_EMAIL=dummy" >> .env.test
          echo "ADMIN_PASSWORD=dummy" >> .env.test

      - name: Start services with Docker Compose
        run: docker-compose -f docker-compose.ci.yml up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for API to be ready..."
          sleep 15

      - name: Run E2E tests
        run: docker-compose -f docker-compose.ci.yml exec -T api npm run test:e2e

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.ci.yml down

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: e2e-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: yourdockerhubusername/flight-booking-api:latest, yourdockerhubusername/flight-booking-api:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Placeholder for Deploy
        run: |
          echo "Deployment job placeholder"
          echo "This is where you would add steps to deploy your application."